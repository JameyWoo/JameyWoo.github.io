---
title: "CMU 15-445系列向: 索引"
date: 2021-10-08T21:41:59+08:00
draft: false
---



大纲

- 索引1，介绍各种类型的索引，包括B+Tree，HahsTable，倒排索引，聚簇索引，覆盖索引，联合索引等等

    - 主要是介绍CMU 15445课程中的内容

- 索引2，介绍MySQL innodb的索引的实现（让我有点惊讶）

    - 聚簇索引和二级索引

    - 回表机制！结合MySQL实战来介绍

    - 覆盖索引与联合索引（前缀索引），索引下推

## 概述

本文围绕CMU 15-445中的Tree Indexes一课，对数据库引擎中的索引进行介绍和总结，[点击下载课程的slide链接](https://15445.courses.cs.cmu.edu/fall2021/slides/)。 

在这节课中，Andy介绍了B+Tree索引以及其后面的B-Tree family，以及其他索引类型，如聚簇索引，倒排索引，覆盖索引，联合索引等。介绍B+Tree占了最大篇幅，除了其基本内容，还详细地分析了B+Tree中leaf node的内容；并且使用PostgreSQL和MySQL进行了索引选择的实验。Andy还介绍了几种索引实现的优化方法，包括前缀压缩，批量插入，pointer swizzling（指针混写）等。



## 索引分类

索引是数据库存储引擎中非常重要的一个模块，数据Access Methods的内容，即访问方法，顾名思义就是如何访问数据的方法。在数据库层次结构中属于Buffer Pool只上，查询执行器之下的层次。

![image-20211008220207365](https://raw.githubusercontent.com/JameyWoo/FigureBed/master/hugo_imgs/image-20211008220207365.png)

### 

一般而言，有两种类型的索引数据结构，分别是

1. hash_table

2. Trees

而Trees又有很多类型，如B-Tree家族，Trie Tree（字典树，前缀树），Radix Tree（基数树，Trie的一种变体）；其中以B+Tree为代表的B-Tree家族是最重要的，使用最为广泛的数据结构。



### 聚簇索引

B+Tree是实现索引的数据结构，而索引的种类还有聚簇索引，他和B+Tree树索引是不冲突的。也就是说，一个聚簇索引，可以通过B+Tree这种结构来实现。

聚簇索引（clustered indexes）也称为聚集索引，聚类索引，簇集索引，聚簇索引确定表中数据的物理顺序。一般而言，在聚簇索引中，其叶子节点中保留了数据tuple，即完整的行数据。因此，使用聚簇索引搜索时，访问到了叶子节点就可以获取完整的一行数据，而不需要再根据record id去查找tuple，减少了磁盘访问次数。

在MySQL中，默认为primary key建立了聚簇索引，把tuple保存到leaf nodes上；其他的secondary indexes中的leaf node则保存了primary key，再使用该primary key在主索引中进行查找。



## B+Tree

B+Tree属于B-Tree家族，而B-Tree最早在1971年提出，衍生出了许多数据结构，如

- B+Tree 1973 IBM 这节课介绍这个
- B*Tree 1977 
- B^link-Tree CMU

目前，B+Tree是各种数据库引擎中使用最广泛的数据结构。

### B+Tree和B-Tree的区别

Andy说PostgreSQL文档说它使用B-Tree, 但实际使用的是B+Tree，Andy说这个是想说B-Tree和B+Tree总是混用, 说B-Tree也可以代表B+Tee；当然，B+Tree和B-Tree是有显著的区别。



### B+Tree leaf node的细节



### 其他索引



